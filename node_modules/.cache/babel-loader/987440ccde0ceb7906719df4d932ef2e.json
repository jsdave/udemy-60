{"ast":null,"code":"var _jsxFileName = \"/Users/david/Documents/code/udemy/react/section3-understanding-features/react-complete-guide/toggleperson/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Person from './Person/Person';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      persons: [{\n        id: \"adar\",\n        name: \"Max\",\n        age: 28\n      }, {\n        id: \"rerf\",\n        name: \"Manu\",\n        age: 29\n      }, {\n        id: \"rsdf\",\n        name: \"Stephanie\",\n        age: 26\n      }],\n      otherState: \"some other value\",\n      showPersons: false\n    };\n\n    this.deletePersonHandler = personIndex => {\n      // use personIndex which is the index of each person from the array\n      // Arrays and objects are reference types, did not assign a new value to the constant, it is only holding a pointer, I only changed the element it was pointing to. \n      // fetch all persons; slice() copies the array and saves a new one to const persons. Now we can safely splice it. \n      // const persons = this.state.persons.slice();\n      // we can also use the spread operator which is the most modern approach.\n      const persons = [...this.state.persons]; // create new version of that persons array\n      // will start splicing at personIndex and splice 1 element. Removes 1 element from the array. \n\n      persons.splice(personIndex, 1); // call this.setState and set persons to persons. To my persons constant which was updated by splicing 1 element. The persons array still has the rest of the elements. \n\n      this.setState({\n        persons: persons\n      });\n    };\n\n    this.nameChangedHandler = (event, id) => {\n      // get index / id of person input name change\n      const personIndex = this.state.persons.findIndex(p => {\n        return p.id === id;\n      }); // Create a new JavaScript object and use the spread operator in front of the object I am fetching and it will distribute all the properties of the object we fetch here : this.state.persons[personIndex], into the new object we are creating here. \n\n      const person = { ...this.state.persons[personIndex]\n      }; // alternative approach insted of using spread operator; const person = Object.assign({}, this.state.persons[personIndex]);\n      // update person.name and set it to event.target.value\n\n      person.name = event.target.value; // make a copy of persons the whole array\n\n      const persons = [...this.state.persons]; // update it at one position; persons[personIndex] should now be my updated person. \n\n      persons[personIndex] = person; // Set state to the updated persons array, which is a copy of the old array where we updated one element with the updated person where we adjusted the name. Without mutating the state. \n\n      this.setState({\n        persons: persons\n      });\n    };\n\n    this.togglePersonsHandler = () => {\n      // toggle some property that in the ends decides if we want to display this div to show person or not.\n      // this is either true or false it is the current state\n      const doesShow = this.state.showPersons; // call this.setState to adjust the state\n\n      this.setState({\n        showPersons: !doesShow\n      });\n    };\n  }\n\n  render() {\n    // css style properties have JavaScript representations; use camel case not to confuse with css properties. Use strings as values since it is in JavaScript. \n    const style = {\n      backgroundColor: 'green',\n      color: 'white',\n      font: 'inherit',\n      border: '1px solid blue',\n      padding: '8px',\n      cursor: 'pointer'\n    };\n    let persons = null; // this.state.showPersons is a boolean and not need to === true. We can omit that part.\n\n    if (this.state.showPersons) {\n      // if true set persons variable to some JSX code.\n      persons = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, this.state.persons.map((person, index) => {\n        // return JSX for Person component pass key:\"\", name and age. \n        return React.createElement(Person, {\n          click: () => this.deletePersonHandler(index),\n          name: person.name,\n          age: person.age,\n          key: person.id,\n          changed: event => this.nameChangedHandler(event, person.id),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106\n          },\n          __self: this\n        });\n      }));\n      style.backgroundColor = 'red';\n    } // referring to App.css styling the paragraph below depending on the number of persons. String \"red bold\" valid css class. Will edit array dynamically.\n\n\n    let classes = ['red', 'bold'].join(' ');\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, \" Hi, I'm a React App\"), React.createElement(\"p\", {\n      className: classes,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, \" This is really working!\"), React.createElement(\"button\", {\n      style: style,\n      onClick: this.togglePersonsHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, \"Toggle Persons\"), persons);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/david/Documents/code/udemy/react/section3-understanding-features/react-complete-guide/toggleperson/src/App.js"],"names":["React","Component","Person","App","state","persons","id","name","age","otherState","showPersons","deletePersonHandler","personIndex","splice","setState","nameChangedHandler","event","findIndex","p","person","target","value","togglePersonsHandler","doesShow","render","style","backgroundColor","color","font","border","padding","cursor","map","index","classes","join"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;AACA,OAAOC,MAAP,MAAmB,iBAAnB;;AAEA,MAAMC,GAAN,SAAkBF,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAI1BG,KAJ0B,GAIlB;AACNC,MAAAA,OAAO,EAAE,CACP;AAAEC,QAAAA,EAAE,EAAE,MAAN;AAAcC,QAAAA,IAAI,EAAE,KAApB;AAA2BC,QAAAA,GAAG,EAAE;AAAhC,OADO,EAEP;AAAEF,QAAAA,EAAE,EAAE,MAAN;AAAcC,QAAAA,IAAI,EAAE,MAApB;AAA4BC,QAAAA,GAAG,EAAE;AAAjC,OAFO,EAGP;AAAEF,QAAAA,EAAE,EAAE,MAAN;AAAcC,QAAAA,IAAI,EAAE,WAApB;AAAiCC,QAAAA,GAAG,EAAE;AAAtC,OAHO,CADH;AAMNC,MAAAA,UAAU,EAAE,kBANN;AAONC,MAAAA,WAAW,EAAE;AAPP,KAJkB;;AAAA,SAc1BC,mBAd0B,GAcHC,WAAD,IAAiB;AACrC;AACA;AAEA;AACA;AAEA;AACA,YAAMP,OAAO,GAAG,CAAC,GAAG,KAAKD,KAAL,CAAWC,OAAf,CAAhB,CARqC,CAUrC;AACA;;AACAA,MAAAA,OAAO,CAACQ,MAAR,CAAeD,WAAf,EAA4B,CAA5B,EAZqC,CAcrC;;AACA,WAAKE,QAAL,CAAc;AACZT,QAAAA,OAAO,EAAEA;AADG,OAAd;AAGD,KAhCyB;;AAAA,SAkC1BU,kBAlC0B,GAkCL,CAACC,KAAD,EAAQV,EAAR,KAAe;AAClC;AACA,YAAMM,WAAW,GAAG,KAAKR,KAAL,CAAWC,OAAX,CAAmBY,SAAnB,CAA6BC,CAAC,IAAI;AACpD,eAAOA,CAAC,CAACZ,EAAF,KAASA,EAAhB;AACD,OAFmB,CAApB,CAFkC,CAMlC;;AAEA,YAAMa,MAAM,GAAG,EACb,GAAG,KAAKf,KAAL,CAAWC,OAAX,CAAmBO,WAAnB;AADU,OAAf,CARkC,CAYlC;AAIA;;AACAO,MAAAA,MAAM,CAACZ,IAAP,GAAcS,KAAK,CAACI,MAAN,CAAaC,KAA3B,CAjBkC,CAmBlC;;AACA,YAAMhB,OAAO,GAAG,CAAC,GAAG,KAAKD,KAAL,CAAWC,OAAf,CAAhB,CApBkC,CAsBlC;;AACAA,MAAAA,OAAO,CAACO,WAAD,CAAP,GAAuBO,MAAvB,CAvBkC,CAyBlC;;AAEA,WAAKL,QAAL,CAAc;AACZT,QAAAA,OAAO,EAAEA;AADG,OAAd;AAGD,KAhEyB;;AAAA,SAkE1BiB,oBAlE0B,GAkEH,MAAM;AAC3B;AAEA;AACA,YAAMC,QAAQ,GAAG,KAAKnB,KAAL,CAAWM,WAA5B,CAJ2B,CAM3B;;AACA,WAAKI,QAAL,CAAc;AACZJ,QAAAA,WAAW,EAAE,CAACa;AADF,OAAd;AAID,KA7EyB;AAAA;;AA+E1BC,EAAAA,MAAM,GAAG;AAEP;AACA,UAAMC,KAAK,GAAG;AACZC,MAAAA,eAAe,EAAE,OADL;AAEZC,MAAAA,KAAK,EAAE,OAFK;AAGZC,MAAAA,IAAI,EAAE,SAHM;AAIZC,MAAAA,MAAM,EAAE,gBAJI;AAKZC,MAAAA,OAAO,EAAE,KALG;AAMZC,MAAAA,MAAM,EAAE;AANI,KAAd;AASA,QAAI1B,OAAO,GAAG,IAAd,CAZO,CAcP;;AACA,QAAI,KAAKD,KAAL,CAAWM,WAAf,EAA4B;AAE1B;AACAL,MAAAA,OAAO,GACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKD,KAAL,CAAWC,OAAX,CAAmB2B,GAAnB,CAAuB,CAACb,MAAD,EAASc,KAAT,KAAmB;AACzC;AACA,eAAO,oBAAC,MAAD;AACL,UAAA,KAAK,EAAE,MAAM,KAAKtB,mBAAL,CAAyBsB,KAAzB,CADR;AAEL,UAAA,IAAI,EAAEd,MAAM,CAACZ,IAFR;AAGL,UAAA,GAAG,EAAEY,MAAM,CAACX,GAHP;AAIL,UAAA,GAAG,EAAEW,MAAM,CAACb,EAJP;AAKL,UAAA,OAAO,EAAGU,KAAD,IAAW,KAAKD,kBAAL,CAAwBC,KAAxB,EAA+BG,MAAM,CAACb,EAAtC,CALf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAMD,OARA,CADH,CADF;AAaAmB,MAAAA,KAAK,CAACC,eAAN,GAAwB,KAAxB;AACD,KAhCM,CAkCP;;;AACA,QAAIQ,OAAO,GAAG,CAAC,KAAD,EAAQ,MAAR,EAAgBC,IAAhB,CAAqB,GAArB,CAAd;AAEA,WACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BADF,EAEE;AAAG,MAAA,SAAS,EAAED,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAFF,EAGE;AACE,MAAA,KAAK,EAAET,KADT;AAEE,MAAA,OAAO,EAAE,KAAKH,oBAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAHF,EAMGjB,OANH,CADF;AAWD;;AA/HyB;;AAkI5B,eAAeF,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Person from './Person/Person';\n\nclass App extends Component {\n\n  // state object will be an array\n\n  state = {\n    persons: [\n      { id: \"adar\", name: \"Max\", age: 28 },\n      { id: \"rerf\", name: \"Manu\", age: 29 },\n      { id: \"rsdf\", name: \"Stephanie\", age: 26 }\n    ],\n    otherState: \"some other value\",\n    showPersons: false,\n  }\n\n  deletePersonHandler = (personIndex) => {\n    // use personIndex which is the index of each person from the array\n    // Arrays and objects are reference types, did not assign a new value to the constant, it is only holding a pointer, I only changed the element it was pointing to. \n\n    // fetch all persons; slice() copies the array and saves a new one to const persons. Now we can safely splice it. \n    // const persons = this.state.persons.slice();\n\n    // we can also use the spread operator which is the most modern approach.\n    const persons = [...this.state.persons];\n\n    // create new version of that persons array\n    // will start splicing at personIndex and splice 1 element. Removes 1 element from the array. \n    persons.splice(personIndex, 1);\n\n    // call this.setState and set persons to persons. To my persons constant which was updated by splicing 1 element. The persons array still has the rest of the elements. \n    this.setState({\n      persons: persons,\n    })\n  }\n\n  nameChangedHandler = (event, id) => {\n    // get index / id of person input name change\n    const personIndex = this.state.persons.findIndex(p => {\n      return p.id === id;\n    });\n\n    // Create a new JavaScript object and use the spread operator in front of the object I am fetching and it will distribute all the properties of the object we fetch here : this.state.persons[personIndex], into the new object we are creating here. \n\n    const person = {\n      ...this.state.persons[personIndex]\n    }\n\n    // alternative approach insted of using spread operator; const person = Object.assign({}, this.state.persons[personIndex]);\n\n\n\n    // update person.name and set it to event.target.value\n    person.name = event.target.value;\n\n    // make a copy of persons the whole array\n    const persons = [...this.state.persons];\n\n    // update it at one position; persons[personIndex] should now be my updated person. \n    persons[personIndex] = person;\n\n    // Set state to the updated persons array, which is a copy of the old array where we updated one element with the updated person where we adjusted the name. Without mutating the state. \n\n    this.setState({\n      persons: persons\n    })\n  }\n\n  togglePersonsHandler = () => {\n    // toggle some property that in the ends decides if we want to display this div to show person or not.\n\n    // this is either true or false it is the current state\n    const doesShow = this.state.showPersons;\n\n    // call this.setState to adjust the state\n    this.setState({\n      showPersons: !doesShow,\n    })\n\n  }\n\n  render() {\n\n    // css style properties have JavaScript representations; use camel case not to confuse with css properties. Use strings as values since it is in JavaScript. \n    const style = {\n      backgroundColor: 'green',\n      color: 'white',\n      font: 'inherit',\n      border: '1px solid blue',\n      padding: '8px',\n      cursor: 'pointer'\n    };\n\n    let persons = null;\n\n    // this.state.showPersons is a boolean and not need to === true. We can omit that part.\n    if (this.state.showPersons) {\n\n      // if true set persons variable to some JSX code.\n      persons = (\n        <div>\n          {this.state.persons.map((person, index) => {\n            // return JSX for Person component pass key:\"\", name and age. \n            return <Person\n              click={() => this.deletePersonHandler(index)}\n              name={person.name}\n              age={person.age}\n              key={person.id}\n              changed={(event) => this.nameChangedHandler(event, person.id)} />\n          })}\n        </div>\n      );\n      style.backgroundColor = 'red';\n    }\n\n    // referring to App.css styling the paragraph below depending on the number of persons. String \"red bold\" valid css class. Will edit array dynamically.\n    let classes = ['red', 'bold'].join(' ');\n\n    return (\n      <div className=\"App\">\n        <h1> Hi, I'm a React App</h1>\n        <p className={classes}> This is really working!</p >\n        <button\n          style={style}\n          onClick={this.togglePersonsHandler}>Toggle Persons</button>\n        {persons}\n\n      </div >\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}