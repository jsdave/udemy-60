{"ast":null,"code":"var _jsxFileName = \"/Users/david/Documents/code/udemy/react/section3-understanding-features/react-complete-guide/toggleperson/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Person from './Person/Person';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      persons: [{\n        name: \"Max\",\n        age: 28\n      }, {\n        name: \"Manu\",\n        age: 29\n      }, {\n        name: \"Stephanie\",\n        age: 26\n      }],\n      otherState: \"some other value\",\n      showPersons: false\n    };\n\n    this.switchNameHandler = newName => {\n      this.setState({\n        persons: [{\n          name: newName,\n          age: 28\n        }, {\n          name: \"Manu\",\n          age: 29\n        }, {\n          name: \"Stephanie\",\n          age: 27\n        }]\n      });\n    };\n\n    this.changedNameHandler = event => {\n      this.setState({\n        persons: [{\n          name: \"Max\",\n          age: 28\n        }, {\n          name: event.target.value,\n          age: 29\n        }, {\n          name: \"Stephanie\",\n          age: 26\n        }]\n      });\n    };\n\n    this.togglePersonsHandler = () => {\n      // toggle some property that in the ends decides if we want to display this div to show person or not.\n      // this is either true or false it is the current state\n      const doesShow = this.state.showPersons; // call this.setState to adjust the state\n\n      this.setState({\n        showPersons: !doesShow\n      });\n    };\n  }\n\n  render() {\n    // css style properties have JavaScript representations; use camel case not to confuse with css properties. Use strings as values since it is in JavaScript. \n    const style = {\n      backgroundColor: 'white',\n      font: 'inherit',\n      border: '1px solid blue',\n      padding: '8px',\n      cursor: 'pointer'\n    };\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, \" Hi, I'm a React App\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, \" This is really working!\"), React.createElement(\"button\", {\n      style: style,\n      onClick: this.togglePersonsHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, \"Switch Name\"), this.state.showPersons === true ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(Person, {\n      name: this.state.persons[0].name,\n      age: this.state.persons[0].age,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }), React.createElement(Person, {\n      name: this.state.persons[1].name,\n      age: this.state.persons[1].age,\n      click: this.switchNameHandler.bind(this, \"Max!\"),\n      changed: this.changedNameHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"My Hobbies: Racing\"), React.createElement(Person, {\n      name: this.state.persons[2].name,\n      age: this.state.persons[2].age,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    })) : null);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/david/Documents/code/udemy/react/section3-understanding-features/react-complete-guide/toggleperson/src/App.js"],"names":["React","Component","Person","App","state","persons","name","age","otherState","showPersons","switchNameHandler","newName","setState","changedNameHandler","event","target","value","togglePersonsHandler","doesShow","render","style","backgroundColor","font","border","padding","cursor","bind"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Person from './Person/Person';\n\nclass App extends Component {\n\n  // state object will be an array\n\n  state = {\n    persons: [\n      { name: \"Max\", age: 28 },\n      { name: \"Manu\", age: 29 },\n      { name: \"Stephanie\", age: 26 }\n    ],\n    otherState: \"some other value\",\n    showPersons: false,\n  }\n\n  switchNameHandler = (newName) => {\n\n    this.setState({\n      persons: [\n        { name: newName, age: 28 },\n        { name: \"Manu\", age: 29 },\n        { name: \"Stephanie\", age: 27 }\n      ]\n    })\n  }\n\n  changedNameHandler = (event) => {\n\n    this.setState({\n      persons: [\n        { name: \"Max\", age: 28 },\n        { name: event.target.value, age: 29 },\n        { name: \"Stephanie\", age: 26 }\n      ]\n    })\n  }\n\n  togglePersonsHandler = () => {\n    // toggle some property that in the ends decides if we want to display this div to show person or not.\n\n    // this is either true or false it is the current state\n    const doesShow = this.state.showPersons;\n\n    // call this.setState to adjust the state\n    this.setState({\n      showPersons: !doesShow,\n    })\n\n  }\n\n  render() {\n\n    // css style properties have JavaScript representations; use camel case not to confuse with css properties. Use strings as values since it is in JavaScript. \n    const style = {\n      backgroundColor: 'white',\n      font: 'inherit',\n      border: '1px solid blue',\n      padding: '8px',\n      cursor: 'pointer'\n    };\n\n    return (\n      <div className=\"App\">\n        <h1> Hi, I'm a React App</h1>\n        <p> This is really working!</p >\n        <button style={style} onClick={this.togglePersonsHandler}>Switch Name</button>\n        {this.state.showPersons === true ?\n          <div>\n            < Person\n              name={this.state.persons[0].name}\n              age={this.state.persons[0].age} />\n            <Person\n              name={this.state.persons[1].name}\n              age={this.state.persons[1].age}\n              click={this.switchNameHandler.bind(this, \"Max!\")}\n              changed={this.changedNameHandler}\n            >My Hobbies: Racing</Person>\n            < Person\n              name={this.state.persons[2].name}\n              age={this.state.persons[2].age} />\n          </div> : null\n        }\n      </div >\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}